library(udr)
?simulate_ud_data
?compute_posterior_probs
?summary.ud_fit
?ud_fit
devtools::document()
remotes::install_github("stephenslab/udr")
library(udr)
?ud_fit
devtools::document()
remotes::install_github("stephenslab/udr")
library(udr)
?ud_fit()
devtools::document()
devtools::document()
remotes::install_github("stephenslab/udr")
?ud_fit()
devtools::document()
remotes::install_github("stephenslab/udr")
?ud_fit()
susie = readRDS("/Users/nicholeyang/Desktop/real_sim_survival/susie.rds")
survsvb = readRDS("/Users/nicholeyang/Desktop/real_sim_survival/survsvb.rds")
bvsnlp = readRDS("/Users/nicholeyang/Desktop/real_sim_survival/bvsnlp.rds")
names(susie)
names(susie)
names(survsvb)
names(bvsnlp)
plot(susie$susie.pip[[1]], survsvb$survivalsvb.pip[[1]])
susie$susie.pip[[1]]
survsvb$survivalsvb.pip[[1]]
susie$simulate.cor_type[1:5]
indx = susie$simulate.cor_type == "real" & susie$simulate.num_effect == 1
indx
indx = which(susie$simulate.cor_type == "real" & susie$simulate.num_effect == 1)
indx
length(indx)
indx
?lapply
lapply(indx, function(x) susie$susie.pip[[x]])
indx
pips = unlist(lapply(indx, function(x) susie$susie.pip[[x]]))
length(pips)
susie$simulate.effect_indx[[1]]
susie$simulate.effect_indx[[7]]
susie$simulate.effect_indx[[14]]
is_effect = rep(FALSE, p)
p = 1e3
is_effect = rep(FALSE, p)
is_effect
susie$simulate.effect_indx[[1]]
is_effect[effect_indx] = TRUE
effect_indx = susie$simulate.effect_indx[[1]]
is_effect[effect_indx] = TRUE
is_effect
lapply(indx, function(x) is_effect[susie$simulate.effect_indx[[x]]] = TRUE)
p = 1e3
res.susie = matrix(NA, nrow = p, ncol = )
pips = unlist(lapply(indx, function(x) susie$susie.pip[[x]]))
is_effect = c()
for (i in indx){
init = rep(FALSE, p)
effect_indx = susie$simulate.effect_indx[[i]]
init[effect_indx] = TRUE
is_effect = c(is_effect, init)
}
is_effect[1:55]
length(is_effect)
res.susie = cbind(pips, is_effect)
res.susie = data.frame(cbind(pips, is_effect))
plot(res.susie$pips, col = res.susie$is_effect)
p = 1e3
res.susie = matrix(NA, nrow = p, ncol = )
pips = unlist(lapply(indx, function(x) susie$susie.pip[[x]]))
is_effect = c()
for (i in indx){
init = rep(1, p)
effect_indx = susie$simulate.effect_indx[[i]]
init[effect_indx] = 2
is_effect = c(is_effect, init)
}
res.susie = data.frame(cbind(pips, is_effect))
plot(res.susie$pips, col = res.susie$is_effect)
pips = unlist(lapply(indx, function(x) survsvb$survivalsvb.pip[[x]]))
is_effect = c()
for (i in indx){
init = rep(1, p)
effect_indx = survsvb$simulate.effect_indx[[i]]
init[effect_indx] = 2
is_effect = c(is_effect, init)
}
res.survsvb = data.frame(cbind(pips, is_effect))
plot(res.susie$pips, res.survsvb$pips, col = res.susie$is_effect)
plot(res.susie$pips, res.survsvb$pips, col = res.susie$is_effect, pch = 2)
plot(res.susie$pips, res.survsvb$pips, col = res.susie$is_effect, pch = 16)
sum(res.susie$is_effect != res.survsvb$is_effect)
pch = ifelse(res.susie$is_effect == 1, 1, 16)
plot(res.susie$pips, res.survsvb$pips, col = res.susie$is_effect, pch = pch)
pch = ifelse(res.susie$is_effect == 1, 1, 16)
plot(res.susie$pips, res.survsvb$pips, col = res.susie$is_effect, pch = pch, size = 0.2)
pch = ifelse(res.susie$is_effect == 1, 1, 16)
plot(res.susie$pips, res.survsvb$pips, col = res.susie$is_effect, pch = pch, cex = 0.2)
pch = ifelse(res.susie$is_effect == 1, 1, 16)
cex = ifelse(res.susie$is_effect == 1, 0.5, 1.2)
plot(res.susie$pips, res.survsvb$pips, col = res.susie$is_effect, pch = pch, cex = cex)
pch = ifelse(res.susie$is_effect == 1, 1, 16)
cex = ifelse(res.susie$is_effect == 1, 0.5, 1)
plot(res.susie$pips, res.survsvb$pips, col = res.susie$is_effect, pch = pch, cex = cex)
indx
indx = which(susie$simulate.cor_type == "real" & susie$simulate.num_effect == 1)[1:50]
indx
p = 1e3
pips = unlist(lapply(indx, function(x) susie$susie.pip[[x]]))
is_effect = c()
for (i in indx){
init = rep(1, p)
effect_indx = susie$simulate.effect_indx[[i]]
init[effect_indx] = 2
is_effect = c(is_effect, init)
}
res.susie = data.frame(cbind(pips, is_effect))
pips = unlist(lapply(indx, function(x) survsvb$survivalsvb.pip[[x]]))
is_effect = c()
for (i in indx){
init = rep(1, p)
effect_indx = survsvb$simulate.effect_indx[[i]]
init[effect_indx] = 2
is_effect = c(is_effect, init)
}
res.survsvb = data.frame(cbind(pips, is_effect))
pch = ifelse(res.susie$is_effect == 1, 1, 16)
cex = ifelse(res.susie$is_effect == 1, 0.5, 1)
plot(res.susie$pips, res.survsvb$pips, col = res.susie$is_effect, pch = pch, cex = cex)
for (i in indx){
print(i)
}
compare_pip <- function(pip1, pip2, effect_indx, dat_indx){
is_effect = c()
for (i in dat_indx){
init = rep(FALSE, p)
indx = effect_indx[[i]]
init[indx] = TRUE
is_effect = c(is_effect, init)
}
res = data.frame(cbind(pip1, pip2, is_effect))
}
indx = which(susie$simulate.cor_type == "real" & susie$simulate.num_effect == 1)[1:50]
pip.susie = unlist(lapply(indx, function(x) susie$susie.pip[[x]]))
pip.survsvb = unlist(lapply(indx, function(x) survsvb$survivalsvb.pip[[x]]))
res.pip = compare_pip(pip.susie, pip.survsvb, susie$simulate.effect_indx, dat_indx = indx)
head(res.pip)
plot_pip <- function(res.pip, labs, main){
pch = ifelse(res.susie$is_effect == 1, 16, 1)
cex = ifelse(res.susie$is_effect == 1, 1, 0.5)
plot(res.pip$pip1, res.pip$pip2, col = res.pip$is_effect, pch = pch, cex = cex,
xlab = labs[1], ylab = labs[2], main = main)
}
res.pip = compare_pip(pip.susie, pip.survsvb, susie$simulate.effect_indx, dat_indx = indx)
plot_pip(res.pip, labs = c("susie", "survival.svb"), main = "1 effect")
plot_pip <- function(res.pip, labs, main){
pch = ifelse(res.susie$is_effect == 1, 16, 1)
cex = ifelse(res.susie$is_effect == 1, 1, 0.5)
col = ifelse(res.susie$is_effect == 1, 2, 1)
plot(res.pip$pip1, res.pip$pip2, col = col, pch = pch, cex = cex,
xlab = labs[1], ylab = labs[2], main = main)
}
res.pip = compare_pip(pip.susie, pip.survsvb, susie$simulate.effect_indx, dat_indx = indx)
plot_pip(res.pip, labs = c("susie", "survival.svb"), main = "1 effect")
indx = which(susie$simulate.cor_type == "real" & susie$simulate.num_effect == 1)
pip.susie = unlist(lapply(indx, function(x) susie$susie.pip[[x]]))
pip.survsvb = unlist(lapply(indx, function(x) survsvb$survivalsvb.pip[[x]]))
res.pip = compare_pip(pip.susie, pip.survsvb, susie$simulate.effect_indx, dat_indx = indx)
plot_pip(res.pip, labs = c("susie", "survival.svb"), main = "1 effect")
for (num in 1:3){
indx = which(susie$simulate.cor_type == "real" & susie$simulate.num_effect == num)
pip.susie = unlist(lapply(indx, function(x) susie$susie.pip[[x]]))
pip.survsvb = unlist(lapply(indx, function(x) survsvb$survivalsvb.pip[[x]]))
res.pip = compare_pip(pip.susie, pip.survsvb, susie$simulate.effect_indx, dat_indx = indx)
plot_pip(res.pip, labs = c("susie", "survival.svb"), main = "1 effect")
}
for (num in 1:3){
indx = which(susie$simulate.cor_type == "real" & susie$simulate.num_effect == num)[1:20]
pip.susie = unlist(lapply(indx, function(x) susie$susie.pip[[x]]))
pip.survsvb = unlist(lapply(indx, function(x) survsvb$survivalsvb.pip[[x]]))
res.pip = compare_pip(pip.susie, pip.survsvb, susie$simulate.effect_indx, dat_indx = indx)
plot_pip(res.pip, labs = c("susie", "survival.svb"), main = "1 effect")
}
compare_pip <- function(pip1, pip2, effect_indx, dat_indx){
is_effect = c()
for (i in dat_indx){
init = rep(0, p)
indx = effect_indx[[i]]
init[indx] = 1
is_effect = c(is_effect, init)
}
res = data.frame(cbind(pip1, pip2, is_effect))
}
plot_pip <- function(res.pip, labs, main){
pch = ifelse(res.pip$is_effect == 1, 16, 1)
cex = ifelse(res.pip$is_effect == 1, 1, 0.5)
col = ifelse(res.pip$is_effect == 1, 2, 1)
plot(res.pip$pip1, res.pip$pip2, col = col, pch = pch, cex = cex,
xlab = labs[1], ylab = labs[2], main = main)
}
susie = readRDS("/Users/nicholeyang/Desktop/real_sim_survival/susie.rds")
survsvb = readRDS("/Users/nicholeyang/Desktop/real_sim_survival/survsvb.rds")
bvsnlp = readRDS("/Users/nicholeyang/Desktop/real_sim_survival/bvsnlp.rds")
names(susie)
names(survsvb)
names(bvsnlp)
for (num in 1:3){
indx = which(susie$simulate.cor_type == "real" & susie$simulate.num_effect == num)[1:20]
pip.susie = unlist(lapply(indx, function(x) susie$susie.pip[[x]]))
pip.survsvb = unlist(lapply(indx, function(x) survsvb$survivalsvb.pip[[x]]))
res.pip = compare_pip(pip.susie, pip.survsvb, susie$simulate.effect_indx, dat_indx = indx)
plot_pip(res.pip, labs = c("susie", "survival.svb"), main = "1 effect")
}
compare_pip <- function(pip1, pip2, effect_indx, dat_indx, p){
is_effect = c()
for (i in dat_indx){
init = rep(0, p)
indx = effect_indx[[i]]
init[indx] = 1
is_effect = c(is_effect, init)
}
res = data.frame(cbind(pip1, pip2, is_effect))
}
plot_pip <- function(res.pip, labs, main){
pch = ifelse(res.pip$is_effect == 1, 16, 1)
cex = ifelse(res.pip$is_effect == 1, 1, 0.5)
col = ifelse(res.pip$is_effect == 1, 2, 1)
plot(res.pip$pip1, res.pip$pip2, col = col, pch = pch, cex = cex,
xlab = labs[1], ylab = labs[2], main = main)
}
compare_pip <- function(pip1, pip2, effect_indx, dat_indx, p){
is_effect = c()
for (i in dat_indx){
init = rep(0, p)
indx = effect_indx[[i]]
init[indx] = 1
is_effect = c(is_effect, init)
}
res = data.frame(cbind(pip1, pip2, is_effect))
}
plot_pip <- function(res.pip, labs, main){
pch = ifelse(res.pip$is_effect == 1, 16, 1)
cex = ifelse(res.pip$is_effect == 1, 1, 0.5)
col = ifelse(res.pip$is_effect == 1, 2, 1)
plot(res.pip$pip1, res.pip$pip2, col = col, pch = pch, cex = cex,
xlab = labs[1], ylab = labs[2], main = main)
}
susie = readRDS("/Users/nicholeyang/Desktop/real_sim_survival/susie.rds")
survsvb = readRDS("/Users/nicholeyang/Desktop/real_sim_survival/survsvb.rds")
bvsnlp = readRDS("/Users/nicholeyang/Desktop/real_sim_survival/bvsnlp.rds")
for (num in 1:3){
indx = which(susie$simulate.cor_type == "real" & susie$simulate.num_effect == num)[1:20]
pip.susie = unlist(lapply(indx, function(x) susie$susie.pip[[x]]))
pip.survsvb = unlist(lapply(indx, function(x) survsvb$survivalsvb.pip[[x]]))
res.pip = compare_pip(pip.susie, pip.survsvb, susie$simulate.effect_indx, dat_indx = indx, p =1e3)
plot_pip(res.pip, labs = c("susie", "survival.svb"), main = "1 effect")
}
for (num in 1:3){
indx = which(susie$simulate.cor_type == "real" & susie$simulate.num_effect == num)[1:50]
pip.susie = unlist(lapply(indx, function(x) susie$susie.pip[[x]]))
pip.survsvb = unlist(lapply(indx, function(x) survsvb$survivalsvb.pip[[x]]))
res.pip = compare_pip(pip.susie, pip.survsvb, susie$simulate.effect_indx, dat_indx = indx, p =1e3)
plot_pip(res.pip, labs = c("susie", "survival.svb"), main = paste0(num, " effect"))
}
par(mfrow = c(1,2))
for (num in 1:3){
indx = which(susie$simulate.cor_type == "real" & susie$simulate.num_effect == num)[1:50]
pip.susie = unlist(lapply(indx, function(x) susie$susie.pip[[x]]))
pip.survsvb = unlist(lapply(indx, function(x) survsvb$survivalsvb.pip[[x]]))
res.pip = compare_pip(pip.susie, pip.survsvb, susie$simulate.effect_indx, dat_indx = indx, p =1e3)
plot_pip(res.pip, labs = c("susie", "survival.svb"), main = paste0(num, " effect"))
}
par(mfrow = c(1,3))
for (num in 1:3){
indx = which(susie$simulate.cor_type == "real" & susie$simulate.num_effect == num)[1:50]
pip.susie = unlist(lapply(indx, function(x) susie$susie.pip[[x]]))
pip.survsvb = unlist(lapply(indx, function(x) survsvb$survivalsvb.pip[[x]]))
res.pip = compare_pip(pip.susie, pip.survsvb, susie$simulate.effect_indx, dat_indx = indx, p =1e3)
plot_pip(res.pip, labs = c("susie", "survival.svb"), main = paste0(num, " effect"))
}
par(mfrow = c(1,3))
for (num in 1:3){
indx = which(susie$simulate.cor_type == "real" & susie$simulate.num_effect == num)[1:50]
pip.susie = unlist(lapply(indx, function(x) susie$susie.pip[[x]]))
pip.survsvb = unlist(lapply(indx, function(x) survsvb$survivalsvb.pip[[x]]))
res.pip = compare_pip(pip.susie, pip.survsvb, susie$simulate.effect_indx, dat_indx = indx, p =1e3)
plot_pip(res.pip, labs = c("susie", "survival.svb"), main = paste0(num, " effect, real correlation"))
}
par(mfrow = c(1,3))
for (num in 1:3){
indx = which(susie$simulate.cor_type == "real" & susie$simulate.num_effect == num)[1:50]
pip.susie = unlist(lapply(indx, function(x) susie$susie.pip[[x]]))
pip.survsvb = unlist(lapply(indx, function(x) survsvb$survivalsvb.pip[[x]]))
res.pip = compare_pip(pip.susie, pip.survsvb, susie$simulate.effect_indx, dat_indx = indx, p =1e3)
plot_pip(res.pip, labs = c("susie", "survival.svb"), main = paste0(num, " effect, max corr=0.9-0.99"))
}
par(mfrow = c(1,3))
for (num in 1:3){
indx = which(susie$simulate.cor_type == "real" & susie$simulate.num_effect == num)[1:50]
pip.susie = unlist(lapply(indx, function(x) susie$susie.pip[[x]]))
pip.bvsnlp = unlist(lapply(indx, function(x) survsvb$bvsnlp.pip[[x]]))
res.pip = compare_pip(pip.susie, pip.bvsnlp, susie$simulate.effect_indx, dat_indx = indx, p =1e3)
plot_pip(res.pip, labs = c("susie", "bvsnlp"), main = paste0(num, " effect, max corr=0.9-0.99"))
}
res.pip
res.pip = compare_pip(pip.susie, pip.bvsnlp, susie$simulate.effect_indx, dat_indx = indx, p =1e3)
res.pip
par(mfrow = c(1,3))
for (num in 1:3){
indx = which(susie$simulate.cor_type == "real" & susie$simulate.num_effect == num)[1:50]
pip.susie = unlist(lapply(indx, function(x) susie$susie.pip[[x]]))
pip.bvsnlp = unlist(lapply(indx, function(x) bvsnlp$bvsnlp.pip[[x]]))
res.pip = compare_pip(pip.susie, pip.bvsnlp, susie$simulate.effect_indx, dat_indx = indx, p =1e3)
plot_pip(res.pip, labs = c("susie", "bvsnlp"), main = paste0(num, " effect, max corr=0.9-0.99"))
}
par(mfrow = c(1,3))
for (num in 1:3){
indx = which(susie$simulate.cor_type == "real" & susie$simulate.num_effect == num)[1:50]
pip.susie = unlist(lapply(indx, function(x) susie$susie.pip[[x]]))
pip.survsvb = unlist(lapply(indx, function(x) survsvb$survivalsvb.pip[[x]]))
res.pip = compare_pip(pip.susie, pip.survsvb, susie$simulate.effect_indx, dat_indx = indx, p =1e3)
plot_pip(res.pip, labs = c("susie", "survival.svb"), main = paste0(num, " effect, max corr=0.9-0.99"))
}
par(mfrow = c(1,3))
for (num in 1:3){
indx = which(susie$simulate.cor_type == "real" & susie$simulate.num_effect == num)[1:50]
pip.susie = unlist(lapply(indx, function(x) susie$susie.pip[[x]]))
pip.survsvb = unlist(lapply(indx, function(x) survsvb$survivalsvb.pip[[x]]))
res.pip = compare_pip(pip.susie, pip.survsvb, susie$simulate.effect_indx, dat_indx = indx, p =1e3)
plot_pip(res.pip, labs = c("susie", "survival.svb"), main = paste0(num, " effect, max corr=0.9-0.99"))
}
par(mfrow = c(1,3))
for (num in 1:3){
indx = which(susie$simulate.cor_type == "real" & susie$simulate.num_effect == num)[1:50]
pip.susie = unlist(lapply(indx, function(x) susie$susie.pip[[x]]))
pip.bvsnlp = unlist(lapply(indx, function(x) bvsnlp$bvsnlp.pip[[x]]))
res.pip = compare_pip(pip.susie, pip.bvsnlp, susie$simulate.effect_indx, dat_indx = indx, p =1e3)
plot_pip(res.pip, labs = c("susie", "bvsnlp"), main = paste0(num, " effect, max corr=0.9-0.99"))
}
?abline
par(mfrow = c(1,3))
for (num in 1:3){
indx = which(susie$simulate.cor_type == "real" & susie$simulate.num_effect == num)[1:50]
pip.susie = unlist(lapply(indx, function(x) susie$susie.pip[[x]]))
pip.bvsnlp = unlist(lapply(indx, function(x) bvsnlp$bvsnlp.pip[[x]]))
res.pip = compare_pip(pip.susie, pip.bvsnlp, susie$simulate.effect_indx, dat_indx = indx, p =1e3)
plot_pip(res.pip, labs = c("susie", "bvsnlp"), main = paste0(num, " effect, max corr=0.9-0.99"))
abline(a = 0, b = 1, lty = 2, type = "l", col = "blue")
}
?plot
par(mfrow = c(1,3))
for (num in 1:3){
indx = which(susie$simulate.cor_type == "real" & susie$simulate.num_effect == num)[1:50]
pip.susie = unlist(lapply(indx, function(x) susie$susie.pip[[x]]))
pip.bvsnlp = unlist(lapply(indx, function(x) bvsnlp$bvsnlp.pip[[x]]))
res.pip = compare_pip(pip.susie, pip.bvsnlp, susie$simulate.effect_indx, dat_indx = indx, p =1e3)
plot_pip(res.pip, labs = c("susie", "bvsnlp"), main = paste0(num, " effect, max corr=0.9-0.99"))
abline(a = 0, b = 1, lty = 2, col = "blue")
}
?apply
par(mfrow = c(1,3))
for (num in 1:3){
indx = which(susie$simulate.cor_type == "independent" & susie$simulate.num_effect == num)[1:50]
pip.susie = unlist(lapply(indx, function(x) susie$susie.pip[[x]]))
pip.survsvb = unlist(lapply(indx, function(x) survsvb$survivalsvb.pip[[x]]))
res.pip = compare_pip(pip.susie, pip.survsvb, susie$simulate.effect_indx, dat_indx = indx, p =1e3)
plot_pip(res.pip, labs = c("susie", "survival.svb"), main = paste0(num, " effect, max corr=0.9-0.99"))
}
par(mfrow = c(1,3))
for (num in 1:3){
indx = which(susie$simulate.cor_type == "independent" & susie$simulate.num_effect == num)[1:50]
pip.susie = unlist(lapply(indx, function(x) susie$susie.pip[[x]]))
pip.bvsnlp = unlist(lapply(indx, function(x) bvsnlp$bvsnlp.pip[[x]]))
res.pip = compare_pip(pip.susie, pip.bvsnlp, susie$simulate.effect_indx, dat_indx = indx, p =1e3)
plot_pip(res.pip, labs = c("susie", "bvsnlp"), main = paste0(num, " effect, max corr=0.9-0.99"))
abline(a = 0, b = 1, lty = 2, col = "blue")
}
par(mfrow = c(1,3))
for (num in 1:3){
indx = which(susie$simulate.cor_type == "independent" & susie$simulate.num_effect == num)[1:50]
pip.susie = unlist(lapply(indx, function(x) susie$susie.pip[[x]]))
pip.survsvb = unlist(lapply(indx, function(x) survsvb$survivalsvb.pip[[x]]))
res.pip = compare_pip(pip.susie, pip.survsvb, susie$simulate.effect_indx, dat_indx = indx, p =1e3)
plot_pip(res.pip, labs = c("susie", "survival.svb"), main = paste0(num, " effect, max corr=0.9-0.99"))
abline(a = 0, b = 1, lty = 2, col = "blue")
}
par(mfrow = c(1,3))
for (num in 1:3){
indx = which(susie$simulate.cor_type == "independent" & susie$simulate.num_effect == num)[1:50]
pip.susie = unlist(lapply(indx, function(x) susie$susie.pip[[x]]))
pip.survsvb = unlist(lapply(indx, function(x) survsvb$survivalsvb.pip[[x]]))
res.pip = compare_pip(pip.susie, pip.survsvb, susie$simulate.effect_indx, dat_indx = indx, p =1e3)
plot_pip(res.pip, labs = c("susie", "survival.svb"), main = paste0(num, " effect, X close to independent"))
abline(a = 0, b = 1, lty = 2, col = "blue")
}
library(udr)
remotes::install_github("stephenslab/udr")
library(udr)
set.seed(1)
n <- 4000
V <- rbind(c(0.8,0.2),
c(0.2,1.5))
U <- list(none   = rbind(c(0,0),
c(0,0)),
shared = rbind(c(1.0,0.9),
c(0.9,1.0)),
only1  = rbind(c(1,0),
c(0,0)),
only2  = rbind(c(0,0),
c(0,1)))
w <- c(0.8,0.1,0.075,0.025)
X <- simulate_ud_data(n,w,U,V)
fit0 <- ud_init(X)
fit1 <- ud_fit(fit0)
fit0 <- ud_init(X)
fit1 <- ud_fit(fit0, V = V)
fit0 <- ud_init(X, V = V)
fit1 <- ud_fit(fit0)
library(udr)
set.seed(1)
n <- 4000
V <- rbind(c(0.8,0.2),
c(0.2,1.5))
U <- list(none   = rbind(c(0,0),
c(0,0)),
shared = rbind(c(1.0,0.9),
c(0.9,1.0)),
only1  = rbind(c(1,0),
c(0,0)),
only2  = rbind(c(0,0),
c(0,1)))
w <- c(0.8,0.1,0.075,0.025)
X <- simulate_ud_data(n,w,U,V)
fit0 <- ud_init(X, V = V)
fit1 <- ud_fit(fit0)
