library(udr)
K = 5
R = 5
n = 5e3
param = list(w = rep(1/K, K), U = list(), V = diag(R))
seed = 1
n
set.seed(seed)
for (k in 1:K){
param$U[[k]] <- udr:::sim_unconstrained(R)
}
dat <- simulate_ud_data(n, param$w, param$U, param$V)
seed
set.seed(seed + 888)
U.init = c()
for (k in 1:K){
U.init[[k]] <- udr:::sim_unconstrained(R)
}
U.init[[1]]
param$U[[1]]
fit = ud_fit(f0, control = list(unconstrained.update = "ed", resid.update = 'none',
tol = 1e-02, tol.lik = 1e-2, n0 = 0, lambda = 0, maxiter = 5e3), verbose=TRUE)
f0 = ud_init(X = dat$X, V = param$V, U_scaled = NULL, U_unconstrained = U.init, n_rank1 = 0)
# Fit ED
fit = ud_fit(f0, control = list(unconstrained.update = "ed", resid.update = 'none',
tol = 1e-02, tol.lik = 1e-2, n0 = 0, lambda = 0, maxiter = 5e3), verbose=TRUE)
f0 = ud_init(X = dat$X, V = param$V, U_scaled = NULL, U_unconstrained = U.init, n_rank1 = 0)
# Fit ED
fit = ud_fit(f0, control = list(unconstrained.update = "ed", resid.update = 'none',
tol = 1e-02, tol.lik = 1e-2, n0 = 0, lambda = 0, maxiter = 5e3), verbose=TRUE)
f0 = ud_init(X = dat$X, V = param$V, U_scaled = NULL, U_unconstrained = U.init, n_rank1 = 0)
dat
f0 = ud_init(X = dat, V = param$V, U_scaled = NULL, U_unconstrained = U.init, n_rank1 = 0)
fit = ud_fit(f0, control = list(unconstrained.update = "ed", resid.update = 'none',
tol = 1e-02, tol.lik = 1e-2, n0 = 0, lambda = 0, maxiter = 5e3), verbose=TRUE)
fit$loglik
tail(fit$progress)
fit$loglik
f0$loglik
fit$loglik_penalized
fit$loglik
fit$progress$loglik
rev(fit$progress$loglik)[1]
rnorm(1e4)
x = rnorm(1e4)
sum(x == 0)
sum(abs(x) < 1e4)
sum(abs(x) < 1e-4)
sum(abs(x) < 1e-3)
sum(abs(x) < 1e-2)
c(2/3,1/3),c(0,0),c(1,2)
getwd()
load_all("/Users/nicholeyang/desktop/udr")
devtools::load_all("/Users/nicholeyang/desktop/udr")
?cv_single_model
??cv_single_model
help(cv_single_model)
??ud_fit
?ud_fit
?ud_fit
devtools::load_all("/Users/nicholeyang/desktop/udr")
?ud_fit
devtools::load_all("/Users/nicholeyang/desktop/udr")
devtools::load_all("/Users/nicholeyang/desktop/udr")
?ud_fit
devtools::load_all("/Users/nicholeyang/desktop/udr")
?ud_fit
devtools::document()
pwd
getwd()
setwd("/Users/nicholeyang/desktop/udr")
devtools::document()
devtools::document()
res = readRDS("/Users/nicholeyang/Desktop/udr_related/udr_simulation202209/Figure1/res.train.rds")
res
hist(res[[1]])
library(ggplot2)
library(dplyr)
library(hrbrthemes)
install.packages("hrbrthemes")
library(ggplot2)
library(dplyr)
library(hrbrthemes)
# Build dataset with different distributions
data <- data.frame(
type = c( rep("variable 1", 1000), rep("variable 2", 1000) ),
value = c( rnorm(1000), rnorm(1000, mean=4) )
)
# Represent it
p <- data %>%
ggplot( aes(x=value, fill=type)) +
geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
theme_ipsum() +
labs(fill="")
library(ggplot2)
library(dplyr)
library(hrbrthemes)
# Build dataset with different distributions
data <- data.frame(
type = c( rep("variable 1", 1000), rep("variable 2", 1000) ),
value = c( rnorm(1000), rnorm(1000, mean=4) )
)
# Represent it
p <- data %>%
ggplot( aes(x=value, fill=type)) +
geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
theme_ipsum() +
labs(fill="")
library(ggplot2)
library(dplyr)
library(hrbrthemes)
# Build dataset with different distributions
data <- data.frame(
type = c( rep("variable 1", 1000), rep("variable 2", 1000) ),
value = c( rnorm(1000), rnorm(1000, mean=4) )
)
# Represent it
p <- data %>%
ggplot( aes(x=value, fill=type)) +
geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
theme_ipsum() +
labs(fill="")
p
res[[1]]
library(ggplot2)
library(dplyr)
library(hrbrthemes)
# Build dataset with different distributions
data <- data.frame(
type = c( rep("ed", 100), rep("ted", 100) ),
value = c( res[[1]], res[[2]])
)
# Represent it
p <- data %>%
ggplot( aes(x=value, fill=type)) +
geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
theme_ipsum() +
labs(fill="")
p
library(ggplot2)
library(dplyr)
library(hrbrthemes)
# Build dataset with different distributions
data <- data.frame(
type = c( rep("ed", 100), rep("ted", 100) ),
value = c( res[[1]], res[[2]])
)
# Represent it
p <- data %>%
ggplot( aes(x=value, fill=type)) +
geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
theme_ipsum() +
labs(fill="") + stat_bin(bins = 30)
p
res[[1]]
res[[2]]
plot(res[[1]], res[[2]])
plot(res[[1]], res[[2]])
abline(a = 0, b = 1, col = "red")
plot(res[[1]], res[[2]], xlab = "ed", ylab = "ted")
abline(a = 0, b = 1, col = "red")
plot(res[[1]], res[[2]], xlab = "ed", ylab = "ted", xlim = c(-12, -10), ylim = c(-12, -10))
abline(a = 0, b = 1, col = "red")
plot(res[[1]], res[[2]], xlab = "ed", ylab = "ted", xlim = c(-12, -10), ylim = c(-12, -10), pch = 20)
abline(a = 0, b = 1, col = "red")
plot(res[[1]], res[[2]], xlab = "ed", ylab = "ted", pch = 20)
abline(a = 0, b = 1, col = "red")
max(res[[2]]-res[[1]])
range(res[[2]]-res[[1]])
0.12*5000
-298623 + 298772
(-298623 + 298772)/15000
